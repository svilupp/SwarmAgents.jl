var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = SwarmAgents","category":"page"},{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"API Reference for SwarmAgents.","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [SwarmAgents]","category":"page"},{"location":"api/#SwarmAgents.Agent","page":"API","title":"SwarmAgents.Agent","text":"Agent\n\nAgent is a stateless struct that holds the the reference to LLM, tools and the instructions.\n\nFields\n\nname::String: The name of the agent.\nmodel::String: The model to use for the agent.\ninstructions::String: The instructions for the agent.\ntool_map::Dict{String, AbstractTool}: A dictionary of tools available to the agent.\ntool_choice::Union{String, Nothing}: The tool choice for the agent.\nparallel_tool_calls::Bool: Whether to allow parallel tool calls. Defaults to true - NOT SUPPORTED YET.\n\n\n\n\n\n","category":"type"},{"location":"api/#SwarmAgents.Response","page":"API","title":"SwarmAgents.Response","text":"Response\n\nResponse from a single full turn of swarm.\n\nFields\n\nmessages::Vector{PT.AbstractMessage}: The additional messages from the last full turn.\nagent::Union{Agent, Nothing}: The current active agent in the session.\ncontext::Dict{Symbol, Any}: The context variables or other data in the session.\n\n\n\n\n\n","category":"type"},{"location":"api/#SwarmAgents.Session","page":"API","title":"SwarmAgents.Session","text":"Session\n\nSession is a mutable struct that holds the messages, agent and context.\n\nFields\n\nmessages::Vector{PT.AbstractMessage}: The history of chat or tool messages in the session.\nagent::Union{Agent, Nothing}: The current active agent in the session.\ncontext::Dict{Symbol, Any}: The context variables or other data in the session.\nartifacts::Vector{Any}: Collects all tool outputs in their full extent.\nio::Union{Nothing,IO}: The sink for printing the outputs.\nrules::Dict{String, AbstractTool}: The rules for the session.\n\n\n\n\n\n","category":"type"},{"location":"api/#SwarmAgents.add_rules!-Tuple{Session, Vector}","page":"API","title":"SwarmAgents.add_rules!","text":"add_rules!(session::Session, tools::Vector)\n\nAdds tools to the session's rules.\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.add_tools!-Tuple{Agent, Vector}","page":"API","title":"SwarmAgents.add_tools!","text":"add_tools!(agent::Agent, tools::Vector)\n\nAdds tools to an agent.\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.handle_tool_calls!-Tuple{Union{Nothing, Agent}, AbstractVector{<:PromptingTools.AbstractMessage}, Session}","page":"API","title":"SwarmAgents.handle_tool_calls!","text":"handle_tool_calls!(\n    active_agent::Union{Agent, Nothing}, history::AbstractVector{<:PT.AbstractMessage},\n    context::Dict{Symbol, Any} = Dict{Symbol, Any}())\n\nHandles tool calls for an agent.\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.print_progress-Tuple{Nothing, Union{Nothing, SwarmAgents.AbstractAgent}, Any}","page":"API","title":"SwarmAgents.print_progress","text":"print_progress(io::Union{IO,Nothing}, agent::Union{AbstractAgent, Nothing}, message; kwargs...)\n\nPrint progress messages based on message type. If io is Nothing, no output is produced. Handles different message types:\n\nAIToolRequest with content: prints assistant message\nToolMessage without content: prints tool request name and args\nToolMessage with content: prints tool output\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.run_full_turn-Tuple{Agent, AbstractVector{<:PromptingTools.AbstractMessage}, Session}","page":"API","title":"SwarmAgents.run_full_turn","text":"run_full_turn(agent::Agent, messages::AbstractVector{<:PT.AbstractMessage},\n    context::Dict{Symbol, Any} = Dict{Symbol, Any}(); max_turns::Int = 5,\n    kwargs...)\n\nRuns a full turn of an agent (executes all tool calls).\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.update_system_message!-Tuple{AbstractVector{<:PromptingTools.AbstractMessage}, Union{Nothing, Agent}}","page":"API","title":"SwarmAgents.update_system_message!","text":"update_system_message!(history::AbstractVector{<:PT.AbstractMessage},\n    active_agent::Union{Agent, Nothing})\n\nUpdates the system message in the history (1st message) with the active agent's instructions.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SwarmAgents","category":"page"},{"location":"#SwarmAgents.jl","page":"Home","title":"SwarmAgents.jl","text":"","category":"section"},{"location":"#Experimental-Package","page":"Home","title":"⚠️ Experimental Package ⚠️","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"WARNING: SwarmAgents.jl is currently in an experimental stage and is under active development. Features, APIs, and functionalities may change without notice. Use at your own risk.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SwarmAgents.jl is a very opinionated translation of OpenAI's Swarm package. This Julia implementation leverages PromptingTools.jl to enable support for multiple LLM providers and tool calling functionalities.","category":"page"},{"location":"#Key-Features","page":"Home","title":"Key Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Integration with various LLM providers through PromptingTools.jl.\nEnhanced tool calling capabilities.\nA flexible and extensible framework for Multi-Agent systems.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You need to have API keys for a supported LLM provider (eg, OPENAI_API_KEY in your environment variables). See PromptingTools.jl for more details.\nInstall the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(; url = \"https://github.com/svilupp/SwarmAgents.jl\")","category":"page"},{"location":"#Key-Concepts","page":"Home","title":"Key Concepts","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This implementation mostly follows the OpenAI Swarm package. It might be helpful to read the original cookbook on orchestrating agents.","category":"page"},{"location":"#Routines","page":"Home","title":"Routines","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A routine is a set of instructions for an AI agent to follow, like a recipe.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example: A customer service routine","category":"page"},{"location":"","page":"Home","title":"Home","text":"Understand the problem\nSuggest a solution or transfer to a specialized agent\nOffer a refund if needed","category":"page"},{"location":"#Handoffs","page":"Home","title":"Handoffs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A handoff occurs when one AI agent passes the conversation to another specialized agent.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example: Customer support system","category":"page"},{"location":"","page":"Home","title":"Home","text":"Triage Agent → directs to appropriate department\nSales Agent ← handles purchases\nRepair Agent ← manages product issues","category":"page"},{"location":"","page":"Home","title":"Home","text":"Handoffs allow seamless transitions between different expertise areas, enhancing the overall interaction.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Swarm\n\n## Define agents and their tools\n# Instructions are the routines\nenglish_agent = Agent(name = \"English Agent\",\n    instructions = \"You only speak English.\")\nspanish_agent = Agent(name = \"Spanish Agent\",\n    instructions = \"You only speak Spanish.\")\n\n# Below are the handoffs\ntransfer_to_spanish_agent() = spanish_agent\nadd_tools!(english_agent, transfer_to_spanish_agent)\n\ntransfer_to_english_agent() = english_agent\nadd_tools!(spanish_agent, transfer_to_english_agent)\n\n# Initialize a session to hold the state and pick the initial agent\nsess = Session(english_agent)\n\n# Run a full turn until tools are depleted\nrun_full_turn!(sess, \"Hola. ¿Como estás?\")\n\n# You can run repeated turns to continue the session\nrun_full_turn!(sess, \"What do you mean?\")","category":"page"},{"location":"","page":"Home","title":"Home","text":">> User: Hola. ¿Como estás?\n\n>> Tool Request: transfer_to_spanish_agent, args: Dict{Symbol, Any}()\n>> Tool Output: {\"assistant\":\"Spanish Agent\"}\n>> Assistant: ¡Hola! Estoy bien, gracias. ¿Y tú?\n\n>> User: What do you mean?\n\n>> Tool Request: transfer_to_english_agent, args: Dict{Symbol, Any}()\n>> Tool Output: {\"assistant\":\"English Agent\"}\n>> Assistant: You were speaking in Spanish, so I transferred you to a Spanish-speaking agent. How can I assist you in English today?","category":"page"},{"location":"","page":"Home","title":"Home","text":"See folder examples/ for more examples.","category":"page"}]
}
