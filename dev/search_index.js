var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = SwarmAgents","category":"page"},{"location":"api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"API Reference for SwarmAgents.","category":"page"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/","page":"API","title":"API","text":"Modules = [SwarmAgents]","category":"page"},{"location":"api/#SwarmAgents.AbstractFlowRules","page":"API","title":"SwarmAgents.AbstractFlowRules","text":"AbstractFlowRules\n\nAbstract type for flow control rules that manage tool usage order and prerequisites.\n\nTwo concrete implementations are provided:\n\nFixedOrder: Tools must be used in exact sequence specified\nFixedPrerequisites: Tools can only be used after their prerequisites\n\nExamples\n\n# FixedOrder Example:\n# Tools must be used in exact sequence: prepare -> process -> finish\nfixed_order = FixedOrder([:prepare, :process, :finish])\n# Only :prepare will be available initially\n# After using :prepare, only :process will be available\n# After using :process, only :finish will be available\n\n# FixedPrerequisites Example:\n# Tools can be used once their prerequisites are met\nprerequisites = FixedPrerequisites([:setup, :analyze, :report])\n# Initially only :setup is available\n# After using :setup, both :setup and :analyze become available\n# After using both :setup and :analyze, all tools become available\n\n\n\n\n\n","category":"type"},{"location":"api/#SwarmAgents.Agent","page":"API","title":"SwarmAgents.Agent","text":"Agent\n\nAgent is a stateless struct that holds the the reference to LLM, tools and the instructions.\n\nFields\n\nname::String: The name of the agent.\nmodel::String: The model to use for the agent.\ninstructions::String: The instructions for the agent.\ntool_map::Dict{String, AbstractTool}: A dictionary of tools available to the agent.\ntool_choice::Union{String, Nothing}: The tool choice for the agent.\nparallel_tool_calls::Bool: Whether to allow parallel tool calls. Defaults to true - NOT SUPPORTED YET.\nrules::Vector{AbstractFlowRules}: Flow rules that control tool usage order and prerequisites.\n\n\n\n\n\n","category":"type"},{"location":"api/#SwarmAgents.FixedOrder","page":"API","title":"SwarmAgents.FixedOrder","text":"FixedOrder <: AbstractFlowRules\n\nEnforces tools to be used in exact sequence specified. Tools can only be used in the order they appear in the tools vector.\n\nFields\n\ntools::Vector{Symbol}: Ordered sequence of tool names that must be followed\n\nExample\n\n# Create agent with fixed order tools\nagent = Agent(name=\"SequentialAgent\")\nadd_tools!(agent, [Tool(setup), Tool(process), Tool(finish)])\nfixed_order = FixedOrder([:setup, :process, :finish])\nadd_rules!(agent, fixed_order)\n\n# Now tools must be used in sequence:\n# 1. Only setup() is available initially\n# 2. After setup(), only process() becomes available\n# 3. After process(), only finish() becomes available\n\n\n\n\n\n","category":"type"},{"location":"api/#SwarmAgents.FixedPrerequisites","page":"API","title":"SwarmAgents.FixedPrerequisites","text":"FixedPrerequisites <: AbstractFlowRules\n\nEnforces prerequisite requirements for tool usage. A tool becomes available only after all previous tools in the sequence have been used.\n\nFields\n\ntools::Vector{Symbol}: Tool names in prerequisite order\n\nExample\n\n# Create agent with prerequisite-based tools\nagent = Agent(name=\"PrereqAgent\")\nadd_tools!(agent, [Tool(configure), Tool(analyze), Tool(report)])\nprereqs = FixedPrerequisites([:configure, :analyze, :report])\nadd_rules!(agent, prereqs)\n\n# Tools become available progressively:\n# 1. Initially only configure() is available\n# 2. After configure(), both configure() and analyze() are available\n# 3. After both configure() and analyze(), all tools become available\n\n\n\n\n\n","category":"type"},{"location":"api/#SwarmAgents.Response","page":"API","title":"SwarmAgents.Response","text":"Response\n\nResponse from a single full turn of swarm.\n\nFields\n\nmessages::Vector{PT.AbstractMessage}: The additional messages from the last full turn.\nagent::Union{Agent, Nothing}: The current active agent in the session.\ncontext::Dict{Symbol, Any}: The context variables or other data in the session.\n\n\n\n\n\n","category":"type"},{"location":"api/#SwarmAgents.Session","page":"API","title":"SwarmAgents.Session","text":"Session\n\nSession is a mutable struct that holds the messages, agent and context.\n\nFields\n\nmessages::Vector{PT.AbstractMessage}: The history of chat or tool messages in the session.\nagent::Union{Agent, Nothing}: The current active agent in the session.\ncontext::Dict{Symbol, Any}: The context variables or other data in the session.\n\n\n\n\n\n","category":"type"},{"location":"api/#SwarmAgents.Session-Tuple{Agent}","page":"API","title":"SwarmAgents.Session","text":"Session(agent::Agent;\n    context::Dict{Symbol, Any} = Dict{Symbol, Any}())\n\nInitializes a Session with an agent and an optional context.\n\nRun run_full_turn! with a user_prompt to continue the session.\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.add_rules!-Tuple{Agent, AbstractFlowRules}","page":"API","title":"SwarmAgents.add_rules!","text":"add_rules!(agent::Agent, rule::AbstractFlowRules)\n\nAdds a single flow rule to an agent.\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.add_rules!-Tuple{Agent, Vector{<:AbstractFlowRules}}","page":"API","title":"SwarmAgents.add_rules!","text":"add_rules!(agent::Agent, rules::Vector{<:AbstractFlowRules})\n\nAdds flow rules to an agent. Flow rules control the order and prerequisites of tool usage.\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.add_tools!-Tuple{Agent, Vector}","page":"API","title":"SwarmAgents.add_tools!","text":"add_tools!(agent::Agent, tools::Vector)\n\nAdds tools to an agent.\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.apply_rules-Tuple{AbstractVector{<:PromptingTools.AbstractMessage}, Agent, Vector{<:PromptingTools.AbstractTool}}","page":"API","title":"SwarmAgents.apply_rules","text":"apply_rules(history::AbstractVector{<:PT.AbstractMessage}, agent::Agent, tools::Vector{<:AbstractTool})\n\nApply flow rules to filter available tools based on usage history and rule types. Returns a filtered vector of tools that are allowed to be used in the current turn.\n\nExample\n\n# Create an ML training pipeline agent\nagent = Agent(name=\"MLTrainer\")\nadd_tools!(agent, [\n    Tool(prepare_data),   # Data preparation\n    Tool(train_model),    # Model training\n    Tool(evaluate),       # Model evaluation\n    Tool(deploy),         # Model deployment\n    Tool(monitor)         # Model monitoring\n])\n\n# Rule 1: Must follow strict ML lifecycle\norder_rule = FixedOrder([\n    :prepare_data,\n    :train_model,\n    :evaluate,\n    :deploy,\n    :monitor\n])\n\n# Rule 2: Can't deploy without evaluation\nprereq_rule = FixedPrerequisites([\n    :evaluate,\n    :deploy\n])\n\n# Add rules to agent\nadd_rules!(agent, [order_rule, prereq_rule])\n\n# Create a session\nsession = Session(agent=agent)\n\n# Initially only prepare_data is available\navailable_tools = apply_rules(session.messages, agent, collect(values(agent.tool_map)))\n# Returns [Tool(prepare_data)]\n\n# After preparing data and training\npush!(session.messages, create_tool_message(\"prepare_data\"))\npush!(session.messages, create_tool_message(\"train_model\"))\navailable_tools = apply_rules(session.messages, agent, collect(values(agent.tool_map)))\n# Returns [Tool(evaluate)] - both rules require evaluation next\n\nSee also: get_allowed_tools, get_used_tools\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.get_allowed_tools-Tuple{FixedOrder, Vector{Symbol}}","page":"API","title":"SwarmAgents.get_allowed_tools","text":"get_allowed_tools(rule::AbstractFlowRules, used_tools::Vector{Symbol}; kwargs...)\n\nGet allowed tools for a specific rule type. Returns a vector of allowed tool names as strings.\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.get_allowed_tools-Tuple{Vector{<:AbstractFlowRules}, Vector{Symbol}}","page":"API","title":"SwarmAgents.get_allowed_tools","text":"get_allowed_tools(rules::Vector{<:AbstractFlowRules}, used_tools::Vector{Symbol}; combine::Function=intersect)\n\nGet allowed tools considering multiple rules. The combine function determines how to combine results from multiple rules (intersect or union). Returns a vector of allowed tool names as strings.\n\nExamples\n\n# Example: Data Pipeline with Multiple Rules\nagent = Agent(name=\"DataScientist\")\nadd_tools!(agent, [\n    Tool(load_data),     # Load data from source\n    Tool(clean_data),    # Clean and preprocess\n    Tool(analyze_data),  # Perform analysis\n    Tool(visualize),     # Create visualizations\n    Tool(export_report)  # Generate final report\n])\n\n# Rule 1: Strict pipeline order\norder_rule = FixedOrder([\n    :load_data,\n    :clean_data,\n    :analyze_data,\n    :visualize,\n    :export_report\n])\n\n# Rule 2: Can't visualize or export until data is loaded and cleaned\nprereq_rule = FixedPrerequisites([\n    :load_data,\n    :clean_data,\n    :visualize,\n    :export_report\n])\n\n# Add both rules to agent\nadd_rules!(agent, [order_rule, prereq_rule])\n\n# Using different combine functions:\n\n# 1. intersect (default) - tools allowed by ALL rules\n# After loading data:\nused = [:load_data]\nallowed = get_allowed_tools([order_rule, prereq_rule], used)\n# Returns [\"clean_data\"] - both rules agree clean_data is next\n\n# 2. union - tools allowed by ANY rule\n# After loading and cleaning:\nused = [:load_data, :clean_data]\nallowed = get_allowed_tools([order_rule, prereq_rule], used, combine=union)\n# Returns [\"analyze_data\", \"visualize\", \"export_report\"]\n# - order_rule allows only analyze_data\n# - prereq_rule allows visualize and export_report\n\nSee also: FixedOrder, FixedPrerequisites, apply_rules\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.get_used_tools-Tuple{AbstractVector{<:PromptingTools.AbstractMessage}}","page":"API","title":"SwarmAgents.get_used_tools","text":"get_used_tools(history::AbstractVector{<:PT.AbstractMessage})\n\nExtract the list of tools that have been used from the message history. Returns a vector of tool names as symbols.\n\n\n\n\n\n","category":"method"},{"location":"api/#SwarmAgents.handle_tool_calls!","page":"API","title":"SwarmAgents.handle_tool_calls!","text":"handle_tool_calls!(\n    active_agent::Union{Agent, Nothing}, history::AbstractVector{<:PT.AbstractMessage},\n    context::Dict{Symbol, Any} = Dict{Symbol, Any}())\n\nHandles tool calls for an agent.\n\n\n\n\n\n","category":"function"},{"location":"api/#SwarmAgents.run_full_turn","page":"API","title":"SwarmAgents.run_full_turn","text":"run_full_turn(agent::Agent, messages::AbstractVector{<:PT.AbstractMessage},\n    context::Dict{Symbol, Any} = Dict{Symbol, Any}(); max_turns::Int = 5,\n    kwargs...)\n\nRuns a full turn of an agent (executes all tool calls).\n\n\n\n\n\n","category":"function"},{"location":"api/#SwarmAgents.update_system_message!-Tuple{AbstractVector{<:PromptingTools.AbstractMessage}, Union{Nothing, Agent}}","page":"API","title":"SwarmAgents.update_system_message!","text":"update_system_message!(history::AbstractVector{<:PT.AbstractMessage},\n    active_agent::Union{Agent, Nothing})\n\nUpdates the system message in the history (1st message) with the active agent's instructions.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = SwarmAgents","category":"page"},{"location":"#SwarmAgents.jl","page":"Home","title":"SwarmAgents.jl","text":"","category":"section"},{"location":"#Experimental-Package","page":"Home","title":"⚠️ Experimental Package ⚠️","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"WARNING: SwarmAgents.jl is currently in an experimental stage and is under active development. Features, APIs, and functionalities may change without notice. Use at your own risk.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SwarmAgents.jl is a very opinionated translation of OpenAI's Swarm package. This Julia implementation leverages PromptingTools.jl to enable support for multiple LLM providers and tool calling functionalities.","category":"page"},{"location":"#Key-Features","page":"Home","title":"Key Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Integration with various LLM providers through PromptingTools.jl.\nEnhanced tool calling capabilities.\nA flexible and extensible framework for Multi-Agent systems.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You need to have API keys for a supported LLM provider (eg, OPENAI_API_KEY in your environment variables). See PromptingTools.jl for more details.\nInstall the package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(; url = \"https://github.com/svilupp/SwarmAgents.jl\")","category":"page"},{"location":"#Key-Concepts","page":"Home","title":"Key Concepts","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This implementation mostly follows the OpenAI Swarm package. It might be helpful to read the original cookbook on orchestrating agents.","category":"page"},{"location":"#Routines","page":"Home","title":"Routines","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A routine is a set of instructions for an AI agent to follow, like a recipe.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example: A customer service routine","category":"page"},{"location":"","page":"Home","title":"Home","text":"Understand the problem\nSuggest a solution or transfer to a specialized agent\nOffer a refund if needed","category":"page"},{"location":"#Handoffs","page":"Home","title":"Handoffs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A handoff occurs when one AI agent passes the conversation to another specialized agent.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example: Customer support system","category":"page"},{"location":"","page":"Home","title":"Home","text":"Triage Agent → directs to appropriate department\nSales Agent ← handles purchases\nRepair Agent ← manages product issues","category":"page"},{"location":"","page":"Home","title":"Home","text":"Handoffs allow seamless transitions between different expertise areas, enhancing the overall interaction.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Swarm\n\n## Define agents and their tools\n# Instructions are the routines\nenglish_agent = Agent(name = \"English Agent\",\n    instructions = \"You only speak English.\")\nspanish_agent = Agent(name = \"Spanish Agent\",\n    instructions = \"You only speak Spanish.\")\n\n# Below are the handoffs\ntransfer_to_spanish_agent() = spanish_agent\nadd_tools!(english_agent, transfer_to_spanish_agent)\n\ntransfer_to_english_agent() = english_agent\nadd_tools!(spanish_agent, transfer_to_english_agent)\n\n# Initialize a session to hold the state and pick the initial agent\nsess = Session(english_agent)\n\n# Run a full turn until tools are depleted\nrun_full_turn!(sess, \"Hola. ¿Como estás?\")\n\n# You can run repeated turns to continue the session\nrun_full_turn!(sess, \"What do you mean?\")","category":"page"},{"location":"","page":"Home","title":"Home","text":">> User: Hola. ¿Como estás?\n\n>> Tool Request: transfer_to_spanish_agent, args: Dict{Symbol, Any}()\n>> Tool Output: {\"assistant\":\"Spanish Agent\"}\n>> Assistant: ¡Hola! Estoy bien, gracias. ¿Y tú?\n\n>> User: What do you mean?\n\n>> Tool Request: transfer_to_english_agent, args: Dict{Symbol, Any}()\n>> Tool Output: {\"assistant\":\"English Agent\"}\n>> Assistant: You were speaking in Spanish, so I transferred you to a Spanish-speaking agent. How can I assist you in English today?","category":"page"},{"location":"","page":"Home","title":"Home","text":"See folder examples/ for more examples.","category":"page"}]
}
